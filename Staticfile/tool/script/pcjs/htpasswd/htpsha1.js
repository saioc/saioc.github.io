var hexcase = 0; var b64pad = "="; var chrsz = 8; function hex_sha1(s) { return binb2hex(core_sha1(str2binb(s), s.length * chrsz)) } function b64_sha1(s) { return binb2b64(core_sha1(str2binb(s), s.length * chrsz)) } function str_sha1(s) { return binb2str(core_sha1(str2binb(s), s.length * chrsz)) } function hex_hmac_sha1(a, b) { return binb2hex(core_hmac_sha1(a, b)) } function b64_hmac_sha1(a, b) { return binb2b64(core_hmac_sha1(a, b)) } function str_hmac_sha1(a, b) { return binb2str(core_hmac_sha1(a, b)) } function sha1_vm_test() { return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d" } function core_sha1(x, f) { x[f >> 5] |= 0x80 << (24 - f % 32); x[((f + 64 >> 9) << 4) + 15] = f; var w = Array(80); var a = 1732584193; var b = -271733879; var c = -1732584194; var d = 271733878; var e = -1009589776; for (var i = 0; i < x.length; i += 16) { var g = a; var h = b; var k = c; var l = d; var m = e; for (var j = 0; j < 80; j++) { if (j < 16) w[j] = x[i + j]; else w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1); var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j))); e = d; d = c; c = rol(b, 30); b = a; a = t } a = safe_add(a, g); b = safe_add(b, h); c = safe_add(c, k); d = safe_add(d, l); e = safe_add(e, m) } return Array(a, b, c, d, e) } function sha1_ft(t, b, c, d) { if (t < 20) return (b & c) | ((~b) & d); if (t < 40) return b ^ c ^ d; if (t < 60) return (b & c) | (b & d) | (c & d); return b ^ c ^ d } function sha1_kt(t) { return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : (t < 60) ? -1894007588 : -899497514 } function core_hmac_sha1(a, b) { var c = str2binb(a); if (c.length > 16) c = core_sha1(c, a.length * chrsz); var d = Array(16), opad = Array(16); for (var i = 0; i < 16; i++) { d[i] = c[i] ^ 0x36363636; opad[i] = c[i] ^ 0x5C5C5C5C } var e = core_sha1(d.concat(str2binb(b)), 512 + b.length * chrsz); return core_sha1(opad.concat(e), 512 + 160) } function safe_add(x, y) { var a = (x & 0xFFFF) + (y & 0xFFFF); var b = (x >> 16) + (y >> 16) + (a >> 16); return (b << 16) | (a & 0xFFFF) } function rol(a, b) { return (a << b) | (a >>> (32 - b)) } function str2binb(a) { var b = Array(); var c = (1 << chrsz) - 1; for (var i = 0; i < a.length * chrsz; i += chrsz) b[i >> 5] |= (a.charCodeAt(i / chrsz) & c) << (24 - i % 32); return b } function binb2str(a) { var b = ""; var c = (1 << chrsz) - 1; for (var i = 0; i < a.length * 32; i += chrsz) b += String.fromCharCode((a[i >> 5] >>> (24 - i % 32)) & c); return b } function binb2hex(a) { var b = hexcase ? "0123456789ABCDEF" : "0123456789abcdef"; var c = ""; for (var i = 0; i < a.length * 4; i++) { c += b.charAt((a[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) + b.charAt((a[i >> 2] >> ((3 - i % 4) * 8)) & 0xF) } return c } function binb2b64(a) { var b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; var c = ""; for (var i = 0; i < a.length * 4; i += 3) { var d = (((a[i >> 2] >> 8 * (3 - i % 4)) & 0xFF) << 16) | (((a[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4)) & 0xFF) << 8) | ((a[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4)) & 0xFF); for (var j = 0; j < 4; j++) { if (i * 8 + j * 6 > a.length * 32) c += b64pad; else c += b.charAt((d >> 6 * (3 - j)) & 0x3F) } } return c }